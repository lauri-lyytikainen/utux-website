/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {
    callToAction: CallToAction;
    text: Text;
    simpleHero: SimpleHero;
    superHero: SuperHero;
    pageMedia: PageMedia;
    linkButton: LinkButton;
    cookiePreferences: CookiePreferences;
    contactForm: ContactForm;
    accordion: Accordion;
    profileCard: ProfileCard;
    imageCarousel: ImageCarousel;
    fileButton: FileButton;
  };
  collections: {
    users: User;
    media: Media;
    file: File;
    pages: Page;
    siteLinks: SiteLink;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    file: FileSelect<false> | FileSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    siteLinks: SiteLinksSelect<false> | SiteLinksSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
    cookieTranslation: CookieTranslation;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    cookieTranslation: CookieTranslationSelect<false> | CookieTranslationSelect<true>;
  };
  locale: 'en' | 'fi';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "callToAction".
 */
export interface CallToAction {
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  buttonText: string;
  showButton?: boolean | null;
  useInternalLink?: boolean | null;
  buttonLink?: (number | null) | Page;
  /**
   * External url address must include the protocol eg. https:// or http://
   */
  buttonLinkExternal?: string | null;
  image?: (number | null) | Media;
  invertLayout?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'callToAction';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  /**
   * The URL path of the page, eg: 'about' would result in '/about'
   */
  path: string;
  title: string;
  blocks?:
    | (
        | {
            title: string;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            buttonText: string;
            showButton?: boolean | null;
            useInternalLink?: boolean | null;
            buttonLink?: (number | null) | Page;
            /**
             * External url address must include the protocol eg. https:// or http://
             */
            buttonLinkExternal?: string | null;
            image?: (number | null) | Media;
            invertLayout?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'callToAction';
          }
        | {
            content?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            title: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'simpleHero';
          }
        | {
            title: string;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            image: number | Media;
            buttonText: string;
            link: number | SiteLink;
            id?: string | null;
            blockName?: string | null;
            blockType: 'superHero';
          }
        | {
            media?: (number | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'pageMedia';
          }
        | {
            buttonText: string;
            /**
             * If checked, the button will be full width of the page, otherwise left aligned
             */
            fullWidth?: boolean | null;
            useInternalLink?: boolean | null;
            buttonLink?: (number | null) | Page;
            /**
             * External url address must include the protocol eg. https:// or http://
             */
            buttonLinkExternal?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'linkButton';
          }
        | {
            locale: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'cookiePreferences';
          }
        | {
            title: string;
            nameField: {
              label: string;
              placeholder: string;
              ErrorShort: string;
              ErrorLong: string;
            };
            emailField: {
              label: string;
              placeholder: string;
              ErrorInvalid: string;
              ErrorLong: string;
            };
            messageField: {
              label: string;
              placeholder: string;
              ErrorShort: string;
              ErrorLong: string;
            };
            submitButtonText: string;
            successMessage: string;
            successTitle: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'contactForm';
          }
        | {
            accordions?:
              | {
                  title: string;
                  content?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'accordion';
          }
        | {
            name: string;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            buttonText: string;
            showButton?: boolean | null;
            useInternalLink?: boolean | null;
            buttonLink?: (number | null) | Page;
            /**
             * External url address must include the protocol eg. https:// or http://
             */
            buttonLinkExternal?: string | null;
            picture: number | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'profileCard';
          }
        | {
            slides?:
              | {
                  title: string;
                  description?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  footer?: {
                    root: {
                      type: string;
                      children: {
                        type: string;
                        version: number;
                        [k: string]: unknown;
                      }[];
                      direction: ('ltr' | 'rtl') | null;
                      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                      indent: number;
                      version: number;
                    };
                    [k: string]: unknown;
                  } | null;
                  buttonText: string;
                  showButton?: boolean | null;
                  useInternalLink?: boolean | null;
                  buttonLink?: (number | null) | Page;
                  /**
                   * External url address must include the protocol eg. https:// or http://
                   */
                  buttonLinkExternal?: string | null;
                  image: number | Media;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'imageCarousel';
          }
        | {
            buttonText: string;
            /**
             * If checked, the button will be full width of the page, otherwise left aligned
             */
            fullWidth?: boolean | null;
            file: number | File;
            id?: string | null;
            blockName?: string | null;
            blockType: 'fileButton';
          }
      )[]
    | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  parent?: (number | null) | Page;
  breadcrumbs?:
    | {
        doc?: (number | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    wide?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Links to pages or external URLs.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "siteLinks".
 */
export interface SiteLink {
  id: number;
  name: string;
  useExternalLink?: boolean | null;
  page?: (number | null) | Page;
  /**
   * Optional anchor name for linking to a specific block on the page. E.g. "contact-form", this would auto scroll to the block with the id "contact-form" on the page.
   */
  blockAnchorName?: string | null;
  /**
   * External url address must include the protocol eg. https:// or http://
   */
  externalLink?: string | null;
  openInNewTab?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "file".
 */
export interface File {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "text".
 */
export interface Text {
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'text';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "simpleHero".
 */
export interface SimpleHero {
  title: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'simpleHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "superHero".
 */
export interface SuperHero {
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  image: number | Media;
  buttonText: string;
  link: number | SiteLink;
  id?: string | null;
  blockName?: string | null;
  blockType: 'superHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pageMedia".
 */
export interface PageMedia {
  media?: (number | null) | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pageMedia';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "linkButton".
 */
export interface LinkButton {
  buttonText: string;
  /**
   * If checked, the button will be full width of the page, otherwise left aligned
   */
  fullWidth?: boolean | null;
  useInternalLink?: boolean | null;
  buttonLink?: (number | null) | Page;
  /**
   * External url address must include the protocol eg. https:// or http://
   */
  buttonLinkExternal?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'linkButton';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cookiePreferences".
 */
export interface CookiePreferences {
  locale: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cookiePreferences';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contactForm".
 */
export interface ContactForm {
  title: string;
  nameField: {
    label: string;
    placeholder: string;
    ErrorShort: string;
    ErrorLong: string;
  };
  emailField: {
    label: string;
    placeholder: string;
    ErrorInvalid: string;
    ErrorLong: string;
  };
  messageField: {
    label: string;
    placeholder: string;
    ErrorShort: string;
    ErrorLong: string;
  };
  submitButtonText: string;
  successMessage: string;
  successTitle: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'contactForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accordion".
 */
export interface Accordion {
  accordions?:
    | {
        title: string;
        content?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'accordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profileCard".
 */
export interface ProfileCard {
  name: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  buttonText: string;
  showButton?: boolean | null;
  useInternalLink?: boolean | null;
  buttonLink?: (number | null) | Page;
  /**
   * External url address must include the protocol eg. https:// or http://
   */
  buttonLinkExternal?: string | null;
  picture: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'profileCard';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "imageCarousel".
 */
export interface ImageCarousel {
  slides?:
    | {
        title: string;
        description?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        footer?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        buttonText: string;
        showButton?: boolean | null;
        useInternalLink?: boolean | null;
        buttonLink?: (number | null) | Page;
        /**
         * External url address must include the protocol eg. https:// or http://
         */
        buttonLinkExternal?: string | null;
        image: number | Media;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "fileButton".
 */
export interface FileButton {
  buttonText: string;
  /**
   * If checked, the button will be full width of the page, otherwise left aligned
   */
  fullWidth?: boolean | null;
  file: number | File;
  id?: string | null;
  blockName?: string | null;
  blockType: 'fileButton';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'file';
        value: number | File;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'siteLinks';
        value: number | SiteLink;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        wide?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "file_select".
 */
export interface FileSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  path?: T;
  title?: T;
  blocks?:
    | T
    | {
        callToAction?:
          | T
          | {
              title?: T;
              description?: T;
              buttonText?: T;
              showButton?: T;
              useInternalLink?: T;
              buttonLink?: T;
              buttonLinkExternal?: T;
              image?: T;
              invertLayout?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              content?: T;
              id?: T;
              blockName?: T;
            };
        simpleHero?:
          | T
          | {
              title?: T;
              id?: T;
              blockName?: T;
            };
        superHero?:
          | T
          | {
              title?: T;
              description?: T;
              image?: T;
              buttonText?: T;
              link?: T;
              id?: T;
              blockName?: T;
            };
        pageMedia?:
          | T
          | {
              media?: T;
              id?: T;
              blockName?: T;
            };
        linkButton?:
          | T
          | {
              buttonText?: T;
              fullWidth?: T;
              useInternalLink?: T;
              buttonLink?: T;
              buttonLinkExternal?: T;
              id?: T;
              blockName?: T;
            };
        cookiePreferences?:
          | T
          | {
              locale?: T;
              id?: T;
              blockName?: T;
            };
        contactForm?:
          | T
          | {
              title?: T;
              nameField?:
                | T
                | {
                    label?: T;
                    placeholder?: T;
                    ErrorShort?: T;
                    ErrorLong?: T;
                  };
              emailField?:
                | T
                | {
                    label?: T;
                    placeholder?: T;
                    ErrorInvalid?: T;
                    ErrorLong?: T;
                  };
              messageField?:
                | T
                | {
                    label?: T;
                    placeholder?: T;
                    ErrorShort?: T;
                    ErrorLong?: T;
                  };
              submitButtonText?: T;
              successMessage?: T;
              successTitle?: T;
              id?: T;
              blockName?: T;
            };
        accordion?:
          | T
          | {
              accordions?:
                | T
                | {
                    title?: T;
                    content?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        profileCard?:
          | T
          | {
              name?: T;
              description?: T;
              buttonText?: T;
              showButton?: T;
              useInternalLink?: T;
              buttonLink?: T;
              buttonLinkExternal?: T;
              picture?: T;
              id?: T;
              blockName?: T;
            };
        imageCarousel?:
          | T
          | {
              slides?:
                | T
                | {
                    title?: T;
                    description?: T;
                    footer?: T;
                    buttonText?: T;
                    showButton?: T;
                    useInternalLink?: T;
                    buttonLink?: T;
                    buttonLinkExternal?: T;
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        fileButton?:
          | T
          | {
              buttonText?: T;
              fullWidth?: T;
              file?: T;
              id?: T;
              blockName?: T;
            };
      };
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "siteLinks_select".
 */
export interface SiteLinksSelect<T extends boolean = true> {
  name?: T;
  useExternalLink?: T;
  page?: T;
  blockAnchorName?: T;
  externalLink?: T;
  openInNewTab?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  links?:
    | {
        text: string;
        linkedPage: number | Page;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  slogan: string;
  copyrightText: string;
  linkGroups?:
    | {
        title: string;
        links?:
          | {
              text: string;
              linkedPage: number | Page;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cookieTranslation".
 */
export interface CookieTranslation {
  id: number;
  /**
   * The cookie preferences dialog.
   */
  popup: {
    /**
     * The title of the cookie preferences dialog
     */
    title: string;
    /**
     * The message displayed in the cookie preferences dialog
     */
    message: string;
    /**
     * The text displayed on the accept button
     */
    buttonText: string;
    /**
     * The text displayed on the decline button
     */
    declineButtonText: string;
    /**
     * The text displayed on the manage cookies button
     */
    manageButtonText: string;
    /**
     * The text displayed on the privacy policy link
     */
    privacyPolicyText: string;
    /**
     * The privacy policy page
     */
    privacyPolicyLink?: (number | null) | Page;
  };
  /**
   * The cookie consent management dialog
   */
  manageConsentModal: {
    /**
     * The title of the cookie consent management dialog
     */
    manageTitle: string;
    /**
     * The message displayed in the cookie consent management dialog
     */
    manageMessage: string;
    /**
     * The status of the cookie consent management dialog, you can use the following placeholders: {{status}} and {{date}}
     */
    manageCookiesStatus: string;
    /**
     * The status of the cookie consent management dialog when the user has consented
     */
    manageCookiesStatusConsented: string;
    /**
     * The status of the cookie consent management dialog when the user has declined
     */
    manageCookiesStatusDeclined: string;
    /**
     * The text displayed on the cancel button
     */
    manageCancelButtonText: string;
    /**
     * The text displayed on the save button
     */
    manageSaveButtonText: string;
  };
  /**
   * The cookie consent management sections
   */
  sections: {
    essential: {
      /**
       * The title of the essential cookie consent management section
       */
      manageEssentialTitle: string;
      /**
       * The description of the essential cookies
       */
      manageEssentialSubtitle: string;
      /**
       * The status of the essential cookies
       */
      manageEssentialStatus: string;
      /**
       * The text displayed on the always on button
       */
      manageEssentialStatusButtonText: string;
    };
    analytics: {
      /**
       * The title of the analytics cookie consent management section
       */
      manageAnalyticsTitle: string;
      /**
       * The description of the analytics cookies
       */
      manageAnalyticsSubtitle: string;
    };
    social: {
      /**
       * The title of the social cookie consent management section
       */
      manageSocialTitle: string;
      /**
       * The description of the social cookies
       */
      manageSocialSubtitle: string;
    };
    advertising: {
      /**
       * The title of the advertising cookie consent management section
       */
      manageAdvertTitle: string;
      /**
       * The description of the advertising cookies
       */
      manageAdvertSubtitle: string;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  links?:
    | T
    | {
        text?: T;
        linkedPage?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  slogan?: T;
  copyrightText?: T;
  linkGroups?:
    | T
    | {
        title?: T;
        links?:
          | T
          | {
              text?: T;
              linkedPage?: T;
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cookieTranslation_select".
 */
export interface CookieTranslationSelect<T extends boolean = true> {
  popup?:
    | T
    | {
        title?: T;
        message?: T;
        buttonText?: T;
        declineButtonText?: T;
        manageButtonText?: T;
        privacyPolicyText?: T;
        privacyPolicyLink?: T;
      };
  manageConsentModal?:
    | T
    | {
        manageTitle?: T;
        manageMessage?: T;
        manageCookiesStatus?: T;
        manageCookiesStatusConsented?: T;
        manageCookiesStatusDeclined?: T;
        manageCancelButtonText?: T;
        manageSaveButtonText?: T;
      };
  sections?:
    | T
    | {
        essential?:
          | T
          | {
              manageEssentialTitle?: T;
              manageEssentialSubtitle?: T;
              manageEssentialStatus?: T;
              manageEssentialStatusButtonText?: T;
            };
        analytics?:
          | T
          | {
              manageAnalyticsTitle?: T;
              manageAnalyticsSubtitle?: T;
            };
        social?:
          | T
          | {
              manageSocialTitle?: T;
              manageSocialSubtitle?: T;
            };
        advertising?:
          | T
          | {
              manageAdvertTitle?: T;
              manageAdvertSubtitle?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}